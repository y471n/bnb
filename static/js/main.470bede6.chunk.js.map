{"version":3,"sources":["components/stockVal.tsx","stockContext.ts","components/updatedAt.tsx","components/stockRow.tsx","components/stockTable.tsx","components/graph.tsx","utils.ts","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","props","currentValue","history","className","length","val","StockContext","useStockContext","UpdatedAt","updatedAt","ms","Date","getTime","secondsAgo","Math","floor","StockRow","name","stockObj","stockContext","key","selectedStock","onClick","setSelectedStock","time","StockTable","stocks","Object","entries","map","stockName","Graph","console","log","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","getReadableTime","dateTime","dateTimeObj","hour","getHours","minutes","getMinutes","seconds","getSeconds","Home","undefined","stockMap","setStockMap","setStocks","receiveStockData","feed","stockInputData","JSON","parse","stockInput","existingStockMap","i","stock","currentStockName","currentStockValue","Number","toFixed","currentTime","now","stockHistoryItem","readableTime","currentStockHistory","push","getStockMap","connection","WebSocket","onmessage","close","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.470bede6.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { IStockHistory } from \"../interfaces/stock\";\n\nconst StockVal = (props: any) => {\n  const currentValue: number = props.currentValue;\n  const history: Array<IStockHistory> = props.history;\n  return (\n    <>\n      <span\n        className={\n          history.length > 1 && history[history.length - 2].val < currentValue\n            ? \"text-success\"\n            : \"text-danger\"\n        }\n      >\n        {currentValue}\n      </span>\n    </>\n  );\n};\n\nexport default React.memo(StockVal);\n","import * as React from \"react\";\nimport { IStock } from \"./interfaces/stock\";\n\ntype IStockContext = {\n  stocks: IStock | undefined;\n  selectedStock: string | undefined;\n  setStocks: React.Dispatch<React.SetStateAction<IStock | undefined>>;\n  setSelectedStock: React.Dispatch<React.SetStateAction<string | undefined>>;\n};\n\nexport const StockContext = React.createContext<IStockContext | null>(null);\n\nexport const useStockContext = () => React.useContext(StockContext);\n","import React from \"react\";\n\ninterface IUpdatedProps {\n  updatedAt: number;\n}\n\nconst UpdatedAt = ({ updatedAt }: IUpdatedProps) => {\n  const ms = new Date().getTime() - updatedAt;\n  const secondsAgo = Math.floor(ms / 1000);\n  return <>{secondsAgo} seconds ago</>;\n};\n\nexport default UpdatedAt;\n","import React from \"react\";\nimport { IStockObj } from \"../interfaces/stock\";\nimport StockVal from \"./stockVal\";\nimport { useStockContext } from \"../stockContext\";\nimport UpdatedAt from \"./updatedAt\";\n\ninterface IStockRowProps {\n  name: string;\n  stockObj: IStockObj;\n}\n\nconst StockRow = ({ name, stockObj }: IStockRowProps) => {\n  const stockContext = useStockContext();\n  return (\n    <tr\n      key={name}\n      className={stockContext?.selectedStock === name ? \"selected\" : \"\"}\n      onClick={() => {\n        stockContext?.setSelectedStock(name);\n      }}\n    >\n      <td>{name}</td>\n      <td>\n        <StockVal currentValue={stockObj.val} history={stockObj.history} />\n      </td>\n      <td>\n        <UpdatedAt\n          updatedAt={stockObj.history[stockObj.history.length - 1].time}\n        />\n      </td>\n    </tr>\n  );\n};\n\nexport default StockRow;\n","import * as React from \"react\";\nimport StockRow from \"./stockRow\";\nimport { useStockContext } from \"../stockContext\";\n\nconst StockTable = () => {\n  const stockContext = useStockContext();\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Stock</th>\n          <th>Price</th>\n          <th>Updated At</th>\n        </tr>\n      </thead>\n      <tbody>\n        {stockContext &&\n          stockContext.stocks &&\n          Object.entries(stockContext.stocks).map(([stockName, stockObj]) => (\n            <StockRow key={stockName} name={stockName} stockObj={stockObj} />\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default StockTable;\n","import * as React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { useStockContext } from \"../stockContext\";\n\nconst Graph = () => {\n  const stockContext = useStockContext();\n  console.log(stockContext);\n  return (\n    <div>\n      {stockContext && stockContext.stocks && stockContext.selectedStock && (\n        <>\n          <LineChart\n            width={500}\n            height={300}\n            data={stockContext.stocks[stockContext.selectedStock].history}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <YAxis dataKey=\"val\" />\n            <XAxis dataKey=\"readableTime\" />\n            <Line\n              type=\"monotone\"\n              dataKey=\"val\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n            <Legend />\n          </LineChart>\n          <Tooltip />\n        </>\n      )}\n      <br />\n    </div>\n  );\n};\n\nexport default Graph;\n","/**\n *\n * @param dateTime number\n * @returns string\n */\nexport const getReadableTime = (dateTime: number) => {\n  const dateTimeObj = new Date(dateTime);\n  const hour = dateTimeObj.getHours();\n  const minutes = dateTimeObj.getMinutes();\n  const seconds = dateTimeObj.getSeconds();\n  return `${hour}:${minutes}:${seconds}`;\n};\n","import * as React from \"react\";\nimport { IStock, IStockHistory } from \"../interfaces/stock\";\nimport StockTable from \"../components/stockTable\";\nimport Graph from \"../components/graph\";\nimport { getReadableTime } from \"../utils\";\nimport { StockContext } from \"../stockContext\";\n\nconst ENDPOINT = \"ws://stocks.mnet.website/\";\n\nconst Home = () => {\n  const [stockMap, setStockMap] = React.useState<IStock | undefined>(undefined);\n  const [selectedStock, setSelectedStock] = React.useState<string | undefined>(\n    undefined\n  );\n\n  const stockContext = React.useMemo(\n    () => ({\n      stocks: stockMap,\n      selectedStock: selectedStock,\n      setStocks: setStockMap,\n      setSelectedStock: setSelectedStock,\n    }),\n    [selectedStock, stockMap, setStockMap, setSelectedStock]\n  );\n  /**\n   *\n   * @param stockInputData {Array<[string, number]}\n   * @returns {IStock}\n   */\n  const getStockMap = (stockInput: Array<[string, number]>): IStock => {\n    let existingStockMap = stockMap ? { ...stockMap } : {};\n    for (let i = 0; i < stockInput.length; i += 1) {\n      const stock = stockInput[0];\n      const currentStockName: string = stock[0];\n      const currentStockValue = Number(Number(stock[1]).toFixed(2));\n      const currentTime = Date.now();\n      const stockHistoryItem: IStockHistory = {\n        time: currentTime,\n        val: currentStockValue,\n        readableTime: getReadableTime(currentTime),\n      };\n      if (existingStockMap && existingStockMap[currentStockName]) {\n        const currentStockHistory = existingStockMap[currentStockName].history;\n        if (\n          currentStockHistory[currentStockHistory.length - 1].val !==\n          currentStockValue\n        ) {\n          existingStockMap[currentStockName].val = currentStockValue;\n          existingStockMap[currentStockName].history.push(stockHistoryItem);\n        }\n      } else {\n        existingStockMap[currentStockName] = {\n          val: currentStockValue,\n          history: [stockHistoryItem],\n        };\n      }\n    }\n    return existingStockMap;\n  };\n\n  /**\n   *\n   * @param feed any\n   * Any since this is the data which is fetched from WebSocker\n   */\n  const receiveStockData = (feed: any) => {\n    const stockInputData = JSON.parse(feed.data);\n    setStockMap(getStockMap(stockInputData));\n  };\n\n  /**\n   * Fetch Data via Websocket\n   */\n  React.useEffect(() => {\n    const connection = new WebSocket(ENDPOINT);\n    connection.onmessage = receiveStockData;\n    return () => connection.close();\n  });\n\n  // const handleClick = (\n  //   stockName: string,\n  //   stockHistory: Array<IStockHistory>\n  // ) => {\n  //   const selectStock: ISelectedStock = {\n  //     name: stockName,\n  //     history: stockHistory,\n  //   };\n  //   setSelectedStock(stockName);\n  // };\n\n  return (\n    <div>\n      <StockContext.Provider value={stockContext}>\n        <div className=\"container\">\n          <div className=\"row flex-spaces\">\n            <div className=\"col-3\">{stockMap && <StockTable />}</div>\n            <div className=\"col-5\">\n              <Graph />\n            </div>\n          </div>\n        </div>\n      </StockContext.Provider>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./pages/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        <span className=\"text-success\">Bulls</span> &{\" \"}\n        <span className=\"text-danger\">Bears</span>\n      </h1>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}